using UnityEngine;
using System.Collections;

public class CarFactory {



	// constructor
	public CarFactory ()
	{
		Debug.Log ("CarFactory().CarFactory()");
	}


	public void createCar(string carType)
	{
		switch(carType)
		{
		default:
		case("auto01"):
			createCarTest(1);
			break;
		}

	}


	private void createCarTest(int type)
	{

		string car_name = "cool car generated by code";
		Vector3 car_startPosition = new Vector3(0f, 23f, 0f);
		Quaternion car_startRotation = Quaternion.Euler(new Vector3(0f,0f,0f));

		float car_mass = 70f; // in kg
		float car_drag = 1f; //

		float coachwork_length = 4f; // in meter
		float coachwork_width = 1.5f; // in meter
		float coachwork_height = 0.1f; // in meter

		float axle_diameter = 0.05f; // in meter
		float axle_length = 2f; // in meter
		float axle_mass = 5f; // in kg

		float axle_car_gap = 0.25f; //in meter
		float axle_distance = 3f; // in meter
		float axle_long_springforce = 2000f; // in N/m 
		float axle_long_damping = 20f; // in Ns/m
		float axle_trans_springforce = 4000f;
		float axle_trans_damping = 40f;

		float wheel_diameter = 0.3f; // in meter

		if(type == 1)
		{
			Debug.Log("Creating car");

			GameObject car = new GameObject();
			car.AddComponent<Rigidbody>();
			car.rigidbody.mass = car_mass;
			car.rigidbody.drag = car_drag;

			GameObject coachwork = GameObject.CreatePrimitive(PrimitiveType.Cube);
			coachwork.name = "coachwork";
			coachwork.transform.parent = car.transform;
			coachwork.transform.localPosition = Vector3.zero;
			coachwork.transform.localScale = new Vector3(coachwork_length,coachwork_height,coachwork_width);


			GameObject axle_front = GameObject.CreatePrimitive(PrimitiveType.Cylinder);
			axle_front.name = "axle_front";
			axle_front.transform.parent = car.transform;
			axle_front.transform.localScale = new Vector3(axle_diameter, axle_length/2f, axle_diameter);
			axle_front.transform.localRotation = Quaternion.Euler(new Vector3(90f,0f,0f));
			axle_front.transform.localPosition = new Vector3(axle_distance/2f,-axle_car_gap,0f);
			axle_front.AddComponent<Rigidbody>();

			GameObject axle_back = (GameObject) Object.Instantiate(axle_front, Vector3.zero, new Quaternion());
			axle_back.name = "axle_back";
			axle_back.transform.parent = car.transform;
			axle_back.transform.localRotation = Quaternion.Euler(new Vector3(90f,0f,0f));
			axle_back.transform.localPosition = new Vector3(-axle_distance/2f,-axle_car_gap,0f);

			custom_spring spring_leftfront = car.AddComponent<custom_spring>();
			spring_leftfront.attachment_partner = axle_front;
			spring_leftfront.local_anchorpoint = new Vector3(axle_distance/2f,0f,axle_length/2f);
			spring_leftfront.local_attachment_partner_anchorpoint = new Vector3(0f,1f,0f);
			spring_leftfront.local_spring_direction = new Vector3(0f,-axle_car_gap,0f);
			spring_leftfront.long_spring_constant = axle_long_springforce;
			spring_leftfront.long_spring_damping = axle_trans_damping;
			spring_leftfront.trans_spring_constant = axle_trans_springforce;
			spring_leftfront.trans_spring_damping = axle_trans_damping;


			custom_spring spring_rigthtfront = car.AddComponent<custom_spring>();
			spring_rigthtfront.attachment_partner = axle_front;
			spring_rigthtfront.local_anchorpoint = new Vector3(axle_distance/2f,0f,-axle_length/2f);
			spring_rigthtfront.local_attachment_partner_anchorpoint = new Vector3(0f,-1f,0f);
			spring_rigthtfront.local_spring_direction = new Vector3(0f,-axle_car_gap,0f);
			spring_rigthtfront.long_spring_constant = axle_long_springforce;
			spring_rigthtfront.long_spring_damping = axle_trans_damping;
			spring_rigthtfront.trans_spring_constant = axle_trans_springforce;
			spring_rigthtfront.trans_spring_damping = axle_trans_damping;


			custom_spring spring_leftback = car.AddComponent<custom_spring>();
			spring_leftback.attachment_partner = axle_back;
			spring_leftback.local_anchorpoint = new Vector3(-axle_distance/2f,0f,axle_length/2f);
			spring_leftback.local_attachment_partner_anchorpoint = new Vector3(0f,1f,0f);
			spring_leftback.local_spring_direction = new Vector3(0f,-axle_car_gap,0f);
			spring_leftback.long_spring_constant = axle_long_springforce;
			spring_leftback.long_spring_damping = axle_trans_damping;
			spring_leftback.trans_spring_constant = axle_trans_springforce;
			spring_leftback.trans_spring_damping = axle_trans_damping;
			
			
			custom_spring spring_rigthtback = car.AddComponent<custom_spring>();
			spring_rigthtback.attachment_partner = axle_back;
			spring_rigthtback.local_anchorpoint = new Vector3(-axle_distance/2f,0f,-axle_length/2f);
			spring_rigthtback.local_attachment_partner_anchorpoint = new Vector3(0f,-1f,0f);
			spring_rigthtback.local_spring_direction = new Vector3(0f,-axle_car_gap,0f);
			spring_rigthtback.long_spring_constant = axle_long_springforce;
			spring_rigthtback.long_spring_damping = axle_trans_damping;
			spring_rigthtback.trans_spring_constant = axle_trans_springforce;
			spring_rigthtback.trans_spring_damping = axle_trans_damping;

			GameObject wheel_front_left = GameObject.CreatePrimitive(PrimitiveType.Sphere);
			wheel_front_left.transform.parent = axle_front.transform;
			wheel_front_left.transform.localScale = new Vector3(wheel_diameter/axle_diameter, wheel_diameter/(axle_length/2f), wheel_diameter/axle_diameter);
			wheel_front_left.transform.localRotation = new Quaternion();
			wheel_front_left.transform.localPosition = new Vector3(0f,1f,0f);

			GameObject wheel_front_right = GameObject.CreatePrimitive(PrimitiveType.Sphere);
			wheel_front_right.transform.parent = axle_front.transform;
			wheel_front_right.transform.localScale = new Vector3(wheel_diameter/axle_diameter, wheel_diameter/(axle_length/2f), wheel_diameter/axle_diameter);
			wheel_front_right.transform.localRotation = new Quaternion();
			wheel_front_right.transform.localPosition = new Vector3(0f,-1f,0f);

			GameObject wheel_back_left = GameObject.CreatePrimitive(PrimitiveType.Sphere);
			wheel_back_left.transform.parent = axle_back.transform;
			wheel_back_left.transform.localScale = new Vector3(wheel_diameter/axle_diameter, wheel_diameter/(axle_length/2f), wheel_diameter/axle_diameter);
			wheel_back_left.transform.localRotation = new Quaternion();
			wheel_back_left.transform.localPosition = new Vector3(0f,1f,0f);
			
			GameObject wheel_back_right = GameObject.CreatePrimitive(PrimitiveType.Sphere);
			wheel_back_right.transform.parent = axle_back.transform;
			wheel_back_right.transform.localScale = new Vector3(wheel_diameter/axle_diameter, wheel_diameter/(axle_length/2f), wheel_diameter/axle_diameter);
			wheel_back_right.transform.localRotation = new Quaternion();
			wheel_back_right.transform.localPosition = new Vector3(0f,-1f,0f);

			PhysicMaterial rubber = new PhysicMaterial();
			rubber.staticFriction = 1f;
			rubber.dynamicFriction = 1f;
			rubber.bounciness = 0.01f;
			wheel_front_left.collider.material = rubber;
			wheel_front_right.collider.material = rubber;
			wheel_back_left.collider.material = rubber;
			wheel_back_right.collider.material = rubber;
			
			car.AddComponent<Car>();
			Motor car_motor = car.AddComponent<Motor>();
			car_motor.motor_axle = axle_front.rigidbody;
		
			GameObject actual_car = (GameObject) Object.Instantiate(car, car_startPosition, car_startRotation);
			GameObject.Destroy(car);
			actual_car.name = car_name;


		}
	}

}
